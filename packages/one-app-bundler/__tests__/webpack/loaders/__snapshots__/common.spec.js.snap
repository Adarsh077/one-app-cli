// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Common webpack loaders babel-loader should return a config that extends the project's babelrc 1`] = `
Object {
  "loader": "babel-loader",
  "options": Object {
    "envName": "modern",
    "extends": "/current/dir/.babelrc",
  },
}
`;

exports[`Common webpack loaders babel-loader should return a config with the expected BABEL_ENV 1`] = `
Object {
  "loader": "babel-loader",
  "options": Object {
    "envName": "legacy",
    "extends": "/current/dir/.babelrc",
  },
}
`;

exports[`Common webpack loaders css-loader should still return a good localIdentName when not given a chunk name 1`] = `
Object {
  "loader": "css-loader",
  "options": Object {
    "modules": Object {
      "localIdentName": "[name]__[local]___[hash:base64:5]",
    },
  },
}
`;

exports[`Common webpack loaders css-loader should use the chunk name in the localIdentName when given 1`] = `
Object {
  "loader": "css-loader",
  "options": Object {
    "modules": Object {
      "localIdentName": "my-chunk__[name]__[local]___[hash:base64:5]",
    },
  },
}
`;

exports[`Common webpack loaders css-loader should use the css-loader 1`] = `
Object {
  "loader": "css-loader",
  "options": Object {
    "modules": Object {
      "localIdentName": "[name]__[local]___[hash:base64:5]",
    },
  },
}
`;

exports[`Common webpack loaders purgecss-loader should include any additional configured paths 1`] = `
Array [
  Object {
    "loader": "@americanexpress/purgecss-loader",
    "options": Object {
      "paths": Array [
        "/current/dir/src/**/*.{js,jsx}",
        "foo",
        "bar",
      ],
    },
  },
]
`;

exports[`Common webpack loaders purgecss-loader should return a config that accounts for the src dir 1`] = `
Array [
  Object {
    "loader": "@americanexpress/purgecss-loader",
    "options": Object {
      "paths": Array [
        "/current/dir/src/**/*.{js,jsx}",
      ],
    },
  },
]
`;

exports[`Common webpack loaders sass-loader should return a config using dart sass 1`] = `
Object {
  "loader": "sass-loader",
  "options": Object {
    "implementation": [Function],
    "sassOptions": Object {
      "fiber": [Function],
    },
  },
}
`;
